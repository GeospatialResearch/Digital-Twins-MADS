version: '3.8'

volumes:
  postgres_db_vol:

services:
  db_postgres:
    # Database to store all vector data, states, and links to raster data.
    image: postgis/postgis:16-3.4
    container_name: db_postgres_digital_twin
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_db_vol:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB

  backend:
    # Performs analysis, computation, handles web requests, facilitates database interactions
    build: .
    image: lparkinson/flood-resilience-dt:1.0
    container_name: backend_digital_twin
    env_file:
      - .env
      - api_keys.env
      - .env.docker-override
    volumes:
      - ${DATA_DIR_MODEL_OUTPUT}:/stored_data/model_output
    ports:
      - "5000:5000"
    depends_on:
      - db_postgres
      - message_broker
      - geoserver

  celery_worker:
    # Performs tasks such as complex computation asynchronously on behalf of backend
    build: .
    image: lparkinson/flood-resilience-dt:1.0
    container_name: celery_worker_digital_twin
    restart: always
    entrypoint: conda run --no-capture-output -n digitaltwin celery -A src.tasks worker -P threads --loglevel=INFO
    env_file:
      - .env
      - api_keys.env
      - .env.docker-override
    volumes:
      # Bind host data directories to container, allowing different instances to share data sources.
      - ${DATA_DIR}:/stored_data
      - ${DATA_DIR_REC}:/stored_data/rec_data
      - ${DATA_DIR_MODEL_OUTPUT}:/stored_data/model_output
      - ${DATA_DIR_GEOSERVER}:/stored_data/geoserver
    depends_on:
      - db_postgres
      - message_broker
      - geoserver

  geoserver:
    # Serves geospatial web data through interactions with files and database
    image: docker.osgeo.org/geoserver:2.21.2
    container_name: geoserver_digital_twin
    volumes:
      - ${DATA_DIR_GEOSERVER}:/opt/geoserver_data
    depends_on:
      - db_postgres
    environment:
      - SKIP_DEMO_DATA=true
      - CORS_ENABLED=true
    ports:
      - "${GEOSERVER_PORT}:8080"
    restart: always
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  # WWW removed temporarily because build is failing and more work is needed.

  message_broker:
    # Communicates between backend and workers to assign tasks and store state
    image: redis:7
    container_name: message_broker_digital_twin
    ports:
      - "6379:6379"
    restart: always
